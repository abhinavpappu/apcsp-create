{
  "DISPLAY": {
    "template": "DISPLAY(expression)",
    "description": "Displays the value of expression, followed by a new line.",
    "variables": ["expression"],
    "select": "expression"
  },
  "INPUT": {
    "template": "INPUT()",
    "description": "Accepts a value from the user and returns it."
  },
  "MOD": {
    "template": "a MOD b",
    "description": "Evaluates to the remainder when a is divided by b",
    "variables": ["a", "b"],
    "select": "b"
  },
  "RANDOM": {
    "template": "RANDOM(min, max)",
    "description": "Evaluates to a random integer from min to max, including min and max. For example, RANDOM (1, 3) could evaluate to 1, 2, or 3.",
    "variables": ["min", "max"],
    "select": "min, max"
  },
  "NOT": {
    "template": "NOT condition",
    "description": "Evaluates to true if condition is false; otherwise evaluates to false.",
    "variables": ["condition"],
    "select": "condition"
  },
  "AND": {
    "template": "condition1 AND condition2",
    "description": "Evaluates to true if both condition1 and condition2 are true; otherwise, evaluates to false.",
    "variables": ["condition1", "condition2"],
    "select": "condition2"
  },
  "OR": {
    "template": "condition1 OR condition2",
    "description": "Evaluates to true if condition1 is true or if condition2 is true or if both condition1 and condition2 are true; otherwise, evaluates to false.",
    "variables": ["condition1", "condition2"],
    "select": "condition2"
  },
  "IF": {
    "template": "IF (condition) {\n  // block of statements\n}",
    "description": "The code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false.",
    "variables": ["condition"],
    "select": "condition"
  },
  "IF ELSE": {
    "template": "IF (condition) {\n  // first block of statements\n}\nELSE {\n  // second block of statements\n}",
    "description": "The code in first block of statements is executed if the Boolean expression condition evaluates to true; otherwise, the code in second block of statements is executed.",
    "variables": ["condition"],
    "select": "condition"
  },
  "REPEAT n TIMES": {
    "template": "REPEAT n TIMES {\n  // block of statements\n}",
    "description": "The code in block of statements is executed n times.",
    "variables": ["n"],
    "select": "n"
  },
  "REPEAT UNTIL": {
    "template": "REPEAT UNTIL (condition) {\n  // block of statements\n}",
    "description": "The code in block of statements is repeated until the Boolean expression condition evaluates to true.",
    "variables": ["condition"],
    "select": "condition"
  },
  "FOR EACH": {
    "template": "FOR EACH item IN list {\n  // block of statements\n}",
    "description": "The variable item is assigned the value of each element of list sequentially, in order from the first element to the last element. The code in block of statements is executed once for each assignment of item.",
    "variables": ["item", "list"],
    "select": "item"
  },
  "INSERT": {
    "template": "INSERT (list, i, value)",
    "description": "Any values in list at indices greater than or equal to i are shifted to the right. The length of list is increased by 1, and value is placed at index i in list.",
    "variables": ["list", "i", "value"],
    "select": "list, i, value"
  },
  "APPEND": {
    "template": "APPEND (list, value)",
    "description": "The length of list is increased by 1, and value is placed at the end of list.",
    "variables": ["list", "value"],
    "select": "list, value"
  },
  "REMOVE": {
    "template": "REMOVE(list, i)",
    "description": "Removes the item at index i in list and shifts to the left any values at indices greater than i. The length of list is decreased by 1.",
    "variables": ["list", "i"],
    "select": "list, i"
  },
  "LENGTH": {
    "template": "LENGTH(list)",
    "description": "Evaluates to the number of elements in list.",
    "variables": ["list"],
    "select": "list"
  },
  "PROCEDURE": {
    "template": "PROCEDURE name (parameter1, parameter2, ...) {\n  // instructions\n  RETURN (expression)\n}",
    "description": "A procedure, name, takes zero or more parameters. The procedure contains programming instructions and returns the value of expression. The RETURN statement may appear at any point inside the procedure and causes an immediate return from the procedure back to the calling program.",
    "variables": ["name", "parameter1", "parameter2", "expression"],
    "select": "parameter1, parameter2, ..."
  },
  "MOVE_FORWARD": {
    "template": "MOVE_FORWARD()",
    "description": "The robot moves one square forward in the direction it is facing."
  },
  "ROTATE_LEFT": {
    "template": "ROTATE_LEFT()",
    "description": "The robot rotates in place 90 degrees counterclockwise (i.e., makes an in-place left turn)."
  },
  "ROTATE_RIGHT": {
    "template": "ROTATE_RIGHT()",
    "description": "The robot rotates in place 90 degrees clockwise (i.e., makes an in-place right turn)."
  },
  "CAN_MOVE": {
    "template": "CAN_MOVE(direction)",
    "description": "Evaluates to true if there is an open square one square in the direction relative to where the robot is facing; otherwise evaluates to false. The value of direction can be left, right, forward, or backward.",
    "variables": ["direction"],
    "select": "direction"
  },
  "GOAL_REACHED": {
    "template": "GOAL_REACHED()",
    "description": "Evaluates to true if the robot is on the green square; otherwise evaluates to false"
  }
}
